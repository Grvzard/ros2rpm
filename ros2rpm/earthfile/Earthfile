VERSION 0.8

FROM alpine:latest
RUN apk add git tar


# self-cmdline:
#     FROM python:3.9
#     WORKDIR /app
#     CACHE /root/.cache/pip

#     RUN pip install "ros2rpm @ git+https://github.com/Grvzard/ros2rpm@main"


clone-pkg:
    ARG --required url
    ARG --required branch
    GIT CLONE --branch $branch $url /tmp/repo
    RUN rm -rf /tmp/repo/.git
    SAVE ARTIFACT /tmp/repo /repo


# gen-spec:
#     FROM +self-cmdline
#     WORKDIR /rpm-src
#     ARG --required url
#     ARG --required package
#     ARG --required version
#     ARG --required rosdistro
#     ARG --required os

#     LET ros_pkgname = ros-$rosdistro-$(echo $package | sed 's/_/-/g')
#     LET rpm_inc = $(echo $version | sed 's/.*-//')

#     COPY (+clone-pkg/repo --url=$url --branch=release/$rosdistro/$package/$version) /tmp/repo

#     RUN ros2rpm spec --rosdistro=$rosdistro --rpm-inc=$rpm_inc --os=$os /tmp/repo $ros_pkgname.spec
#     SAVE ARTIFACT $ros_pkgname.spec


gen-archive:
    WORKDIR /gen-archive
    ARG --required url
    ARG --required rosdistro
    ARG --required package
    ARG --required version

    LET version_main = $(echo $version | sed 's/-.*//')
    LET ros_pkgname = ros-$rosdistro-$(echo $package | sed 's/_/-/g')
    LET arcname_main = $ros_pkgname-$version_main

    COPY (+clone-pkg/repo --branch=release/$rosdistro/$package/$version) $arcname_main
    RUN tar -czf $arcname_main.tar.gz $arcname_main
    SAVE ARTIFACT $arcname_main.tar.gz AS LOCAL SOURCES/


# gen:
#     WORKDIR /gen
#     ARG --required url
#     ARG --required package
#     ARG --required version
#     ARG --required rosdistro
#     ARG --required os

#     LET version_main = $(echo $version | sed 's/-.*//')
#     LET ros_pkgname = ros-$rosdistro-$(echo $package | sed 's/_/-/g')
#     LET arcname_main = $ros_pkgname-$version_main

#     COPY --if-exists SOURCES/$arcname_main.tar.gz .
#     IF [ ! -f $arcname_main.tar.gz ]
#         COPY +gen-archive/* .
#         SAVE ARTIFACT $arcname_main.tar.gz AS LOCAL SOURCES/
#     END
#     COPY --if-exists SOURCES/$ros_pkgname.spec .
#     IF [ ! -f $ros_pkgname.spec ]
#         COPY +gen-spec/$ros_pkgname.spec .
#         SAVE ARTIFACT $ros_pkgname.spec AS LOCAL SPECS/
#     END
#     SAVE ARTIFACT .


oe-rpmbuild:
    ARG arch
    IF [ "$arch" == "arm64" ]
        FROM --platform=linux/arm64 openeuler/openeuler:24.03-lts
    ELSE IF [ "$arch" == "amd64" ]
        FROM --platform=linux/amd64 openeuler/openeuler:24.03-lts
    ELSE IF [ "$arch" == "riscv64" ]
        FROM grvzard/oerv
    ELSE
        FROM openeuler/openeuler:24.03-lts
    END
    RUN dnf install -y git gcc-g++ cmake make patch python3-devel python3-setuptools python3-pytest
    RUN dnf install -y rpmdevtools rpmlint dnf-plugins-core
    RUN dnf install -y createrepo
    # pre-installs
    # https://github.com/ros-industrial/ros2_canopen/pull/290
    RUN dnf install -y python3-yaml


rpm-build:
    ARG arch
    FROM +oe-rpmbuild
    WORKDIR /root/rpmbuild

    ARG --required rosdistro
    ARG os = openeuler:24.03

    # ENV PYTHONPATH=/opt/ros/$rosdistro/lib/python3.11/site-packages:$PYTHONPATH
    RUN PYTHON_VERSION=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")') \
        && export PYTHONPATH="/opt/ros/$rosdistro/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH"

    COPY --if-exists thirdparty.repo /etc/yum.repos.d/thirdparty.repo

    COPY --if-exists RPMS/ /tmp/local-repo/
    IF [ -d /tmp/local-repo/ ]
        RUN echo "[localrepo]
name=Local Repository
baseurl=file:///tmp/local-repo
enabled=1
gpgcheck=0" > /etc/yum.repos.d/local.repo
        RUN createrepo --update /tmp/local-repo/
    END

    ARG --required spec

    ENV CXX="g++ -Wno-error=deprecated-declarations -Wno-error=cpp"
    COPY SPECS/$spec.spec SPECS/
    COPY SOURCES/ SOURCES/

    RUN rpmlint SPECS/$spec.spec
    # RUN 
    RUN dnf builddep --define "ros_distro $rosdistro" -y SPECS/$spec.spec
    RUN rpmbuild -ba --define "ros_distro $rosdistro" SPECS/$spec.spec

    FOR dir IN $(ls -d RPMS/*/)
        SAVE ARTIFACT $dir/* AS LOCAL $dir/
    END
    SAVE ARTIFACT SRPMS/* AS LOCAL SRPMS/


rpm-build-allplatform:
    BUILD +rpm-build --arch=arm64
    BUILD +rpm-build --arch=amd64
    BUILD +rpm-build --arch=riscv64


# build-stage0-repo:
#     FROM +oe-rpmbuild
#     WORKDIR /tmp/stage0-repo
#     ARG --required rosdistro

#     FOR pkgname IN "ament-package ament-cmake-core ros-workspace"
#         COPY RPMS/**/ros-$rosdistro-$pkgname*.rpm .
#     END
#     RUN createrepo --update .

#     SAVE ARTIFACT ./* AS LOCAL stage0/


# rpmbuild:
#     FROM +oe-rpmbuild
#     WORKDIR /root/rpmbuild

#     ARG builddir = .
#     COPY $builddir/SPECS/ SPECS/
#     COPY $builddir/SOURCES/ SOURCES/
#     RUN rpmlint SPECS/*

#     FOR file IN $(ls -d SPECS/*)
#         RUN dnf builddep -y $file
#         RUN rpmbuild -ba $file
#     END
#     RUN createrepo --update RPMS/

#     SAVE ARTIFACT RPMS/* AS LOCAL $builddir/RPMS/
